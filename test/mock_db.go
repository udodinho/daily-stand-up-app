// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/repository.go -destination=test/mock_db.go -package=test
//

// Package test is a generated GoMock package.
package test

import (
	reflect "reflect"

	entity "github.com/udodinho/daily-standup-app/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateUpdate mocks base method.
func (m *MockDB) CreateUpdate(checkin *entity.CheckIn) (*entity.CheckIn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUpdate", checkin)
	ret0, _ := ret[0].(*entity.CheckIn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUpdate indicates an expected call of CreateUpdate.
func (mr *MockDBMockRecorder) CreateUpdate(checkin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUpdate", reflect.TypeOf((*MockDB)(nil).CreateUpdate), checkin)
}

// FindAll mocks base method.
func (m *MockDB) FindAll(startWeek, endWeek, sprint, date, owner string) ([]entity.CheckIn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", startWeek, endWeek, sprint, date, owner)
	ret0, _ := ret[0].([]entity.CheckIn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockDBMockRecorder) FindAll(startWeek, endWeek, sprint, date, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDB)(nil).FindAll), startWeek, endWeek, sprint, date, owner)
}
